pipeline {
    agent any
    tools {
        maven 'Maven3'
        jdk 'JDK17'
        jfrog 'jfrog-cli'
    }
    environment {
        SONARQUBE_ENV = 'SonarQubeServer'
        JFROG_SERVER_ID = "innoimpex"
        OUTPUT_FILE = "demo-webapp-1.0.0.war"
        ARTIFACT_URL = "https://innoimpex.jfrog.io/artifactory/maven-libs-release-local/com/example/demo-webapp/1.0.0/demo-webapp-1.0.0.war"
    }
    stages{
        stage('checkout') {
            steps {
                echo "pulling the code from GitHub.."
                checkout scm
            }
        }
        stage('Build') {
            steps {
                echo "Compiling the code.."
                sh "mvn clean compile"
            }
        }
        stage('Test & code coverage') {
            steps {
                echo "Running test and code coverage.."
                sh "mvn test jacoco:report"
            }
            post {
                always {
                    echo "generating Jacoco report.."
                    jacoco execPattern: '**/target/jacoco.exec',
                    classPattern: '**/target/classes',
                    sourcePattern: '**/src/main/java',
                    inclusionPattern: '**/*.class',
                    exclusionPattern: ''
                }
            }           
        }
        stage('SonarQube Analysis') {
            steps {
                echo "SonarQube Analysis.."
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        withSonarQubeEnv("${SONARQUBE_ENV}") {
                            sh """
                                mvn sonar:sonar \
                                    -Dsonar.projectKey=demo-project \
                                    -Dsonar.login=$SONAR_TOKEN
                            """
                    }
                }
            }
        }
        stage('Quality Gate check') {
            steps {
                echo "Running Quality check.."
                script {
                    def qualityCheck = waitForQualityGate()
                    if (qualityCheck.status != 'OK') {
                        error "Quality check failed ..."
                    }
                }
            }
        }
        stage('Upload to Artifactory') {
            steps {
                sh "mvn clean deploy"
            }
        }
        stage('Pull Artifacts') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'jfrogid', usernameVariable: 'ARTIFACT_USR', passwordVariable: 'ARTIFACT_PASS')]){
                        sh '''
                            curl -u $ARTIFACT_USR:$ARTIFACT_PASS -o $OUTPUT_FILE $ARTIFACT_URL
                        '''
                    }
                }
            }
        }
        stage('approval') {
            steps {
                script {
                    timeout(time: 30, unit: 'MINUTES'){
                        input message: 'Approve the deployment',
                        ok: 'Approve',
                        submitter: 'releasemanager'
                    }
                }
            }
        }
        stage('Deploy to Tomcat') {
            steps {
                sh """
                /Users/abhay/tomcat/bin/shutdown.sh
                sleep 5
                cp ${OUTPUT_FILE} ~/tomcat/webapps/
                /Users/abhay/tomcat/bin/startup.sh
                """
            }
        }
    }

}